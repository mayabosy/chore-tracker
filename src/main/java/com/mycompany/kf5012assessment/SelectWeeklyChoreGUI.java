/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.kf5012assessment;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author w21023500
 */
public class SelectWeeklyChoreGUI extends javax.swing.JFrame {

    private final ChoresDatabase choresDB;

    /**
     * Creates new form SelectWeeklyChoreGUI
     */
    // Define a private ArrayList of Strings to store the chores
    private ArrayList<Chore> choresArrayList;

    public SelectWeeklyChoreGUI() {
        choresDB = new ChoresDatabase();
        choresArrayList = new ArrayList();
        try {
            choresArrayList = choresDB.selectChores();
        } catch (Exception e) {
            System.out.println("Error occured in extracting data");
        }
        //forces chore 2 to be tuesday
        //choresArrayList.get(2).setDay(2);

//        choresArrayList.get(1);
//        choresArrayList.get(2);
//        choresArrayList.get(3);
//        choresArrayList.get(4);
        initComponents();

        // call updateTableData() to populate the table with data
        updateTableForSelectedDay(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choreScrollPane = new javax.swing.JScrollPane();
        choreTable = new javax.swing.JTable();
        chooseDayChore = new javax.swing.JComboBox<>();
        chooseChoreLabel = new javax.swing.JLabel();
        submitChoreButton = new javax.swing.JButton();
        addChoreButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        menueBarOne = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        choreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Task", "Today"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        choreTable.setFocusTraversalPolicyProvider(true);
        choreScrollPane.setViewportView(choreTable);

        chooseDayChore.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any day", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));
        chooseDayChore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                chooseDayChoreMouseEntered(evt);
            }
        });
        chooseDayChore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDayChoreActionPerformed(evt);
            }
        });

        chooseChoreLabel.setText("Choose day of chores ");

        submitChoreButton.setText("Submit");
        submitChoreButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                submitChoreButtonMouseEntered(evt);
            }
        });
        submitChoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitChoreButtonActionPerformed(evt);
            }
        });

        addChoreButton.setText("Add Chore");
        addChoreButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addChoreButtonMouseEntered(evt);
            }
        });
        addChoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChoreButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel ");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("Home");
        menueBarOne.add(jMenu1);

        setJMenuBar(menueBarOne);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(choreScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseChoreLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseDayChore, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addChoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitChoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseChoreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseDayChore, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addChoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(choreScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitChoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void addChore(String choreName, String choreType, List<String> days) {
        ChoresDatabase choresDB = new ChoresDatabase();

        try {
            Chore newChore = new Chore();
            choresArrayList.add(newChore);
            JOptionPane.showMessageDialog(null, "New chore added successfully");
        } catch (Exception e) {
            System.out.println("Error occured in inserting data");
            JOptionPane.showMessageDialog(null, "Error occured in adding chore");
        }

        updateTableForSelectedDay(chooseDayChore.getSelectedIndex() - 1);
    }

    private void chooseDayChoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDayChoreActionPerformed
        // TODO add your handling code here:
        //  Object selected = chooseDayChore.getSelectedItem();
        // int dayNumber = chooseDayChore.getSelectedIndex();
        //  System.out.println("Event happened");
        // updateTableForSelectedDay(dayNumber);

        int dayNumber = chooseDayChore.getSelectedIndex();
        System.out.println("Selected day number: " + dayNumber);
        recordTableChanges(); // Save the current state of the table
        updateTableForSelectedDay(dayNumber); // Update the table for the selected day

        // Save the current table data
        recordTableChanges();

        // Update the table for the new selected day
        updateTableForSelectedDay(dayNumber);
    }//GEN-LAST:event_chooseDayChoreActionPerformed

    private void addChoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChoreButtonActionPerformed
        CreateNewChoreGUI addChoreGUI = new CreateNewChoreGUI(this, true);
        addChoreGUI.pack();
        addChoreGUI.setLocationRelativeTo(null);
        addChoreGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //makes addchoreGUI visble 
        addChoreGUI.setVisible(true);

        updateTableForSelectedDay(chooseDayChore.getSelectedIndex() - 1);

    }//GEN-LAST:event_addChoreButtonActionPerformed

    private void submitChoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitChoreButtonActionPerformed
        recordTableChanges();
        ChoresDatabase choresDB = new ChoresDatabase();
        Map<Integer, List<Chore>> selectedChoresMap = new HashMap<>(); // uses a map to store the selected chores for each day 
        for (Chore chore : choresArrayList) {
            if (chore.isSelectedForThisWeek()) { //Determine which  day for which the chore is selected
                int day = chooseDayChore.getSelectedIndex() - 1;
                selectedChoresMap.putIfAbsent(day, new ArrayList<>()); //Checks if the day exists in the selectedChoresMap, if it doesnt , than it create a new list for that day
                selectedChoresMap.get(day).add(chore);
                try {
                    ChoresDatabase.newchore = chore;
                    choresDB.updateToSelected();
                } catch (SQLException ex) {
                    Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    ChoresDatabase.newchore = chore;
                    choresDB.updateToUnselected();
                } catch (SQLException ex) {
                    Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        if (selectedChoresMap.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select at least one chore for the week before submitting.", "No Chores Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // create a new StringBuilder instance with the message
        StringBuilder message = new StringBuilder("Confirm your selected chores for this week?\n\nSelected Chores:\n");
        for (Map.Entry<Integer, List<Chore>> entry : selectedChoresMap.entrySet()) // loopsthrough the selected chores map and append each day's chores to the message
        {
            // get the day number and the list of chores 
            int day = entry.getKey();
            List<Chore> selectedChores = entry.getValue();
            // show the day number to the message
            message.append("Day ").append(day + 1).append(":\n");
            // loop through the list of chores and append each one to the message
            for (Chore chore : selectedChores) {
                message.append("- ").append(chore.getChoreName()).append("\n");
            }
            // adds a new line to separate each day's chores
            message.append("\n");
        }
//confirm message to the user 
        int confirm = JOptionPane.showConfirmDialog(this, message.toString(), "Confirm Selected Chores", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            //dispose
            this.dispose();
            //opns homepage 
            HomePageGUI mainForm = new HomePageGUI();
            mainForm.setVisible(true);
            updateTableForSelectedDay(chooseDayChore.getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_submitChoreButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel selecting your chores for this week?", "Confirm Cancel", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            //closes window
            this.dispose();
            //home page visble 
            HomePageGUI mainForm = new HomePageGUI();
            mainForm.setVisible(true);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void chooseDayChoreMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseDayChoreMouseEntered
      //gives the user a message if they hover over the button
        chooseDayChore.setToolTipText("select days of the week!");

    }//GEN-LAST:event_chooseDayChoreMouseEntered

    private void addChoreButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addChoreButtonMouseEntered
           //gives the user a message if they hover over the button

        addChoreButton.setToolTipText("click to add a new chore!");
    }//GEN-LAST:event_addChoreButtonMouseEntered

    private void submitChoreButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitChoreButtonMouseEntered
             //gives the user a message if they hover over the button

        submitChoreButton.setToolTipText("submit your selected chores!");
        // TODO add your handling code here:
    }//GEN-LAST:event_submitChoreButtonMouseEntered

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        cancelButton.setToolTipText("cancel selecting your selected chores !");        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonMouseEntered
    private void addNewChore(String task, int day) {
        // Create  Chore with the given task and day
        Chore newChore = new Chore();
        newChore.setChoreName(task);
        newChore.setChoreDay(day);

        // Add the new chore to the list of chores in memory
        choresArrayList.add(newChore);

        // Add the new chore to the database
        ChoresDatabase choresDB = new ChoresDatabase();
        try {
        } catch (Exception e) {
            System.out.println("Error occurred while inserting chore to database");
        }

        // Update the table to show the new chore
        updateTableForSelectedDay(0);
    }

  //gets from the database and stores it in the arraylist 
    public void getData() {
        ChoresDatabase choresDB = new ChoresDatabase();
        choresArrayList = new ArrayList();
        try {
            choresArrayList = choresDB.selectChores();
        } catch (Exception e) {
            System.out.println("Error occured in extracting data");
        }
    }

    
    public void displayTableData() {
        // Empty the existing data

        DefaultTableModel tableModel = (DefaultTableModel) choreTable.getModel();
        tableModel.setRowCount(0);

        // Populate the table model with the latest data
        for (Chore chore : choresArrayList) {
            Object[] rowData = {chore.getChoreName(), chore.isSelectedForThisWeek()};
            tableModel.addRow(rowData);
        }

    }
//takes the data from thable an writes the data back to the arraylist 
// * This method records the changes made to the chore  table.

    public void recordTableChanges() {
        DefaultTableModel tableModel = (DefaultTableModel) choreTable.getModel();
        Map<String, Chore> choreMap = new HashMap<>();
        for (Chore nc : choresArrayList) {
            choreMap.put(nc.getChoreName(), nc);
        }
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String choreName = (String) tableModel.getValueAt(i, 0);
            Chore chore = choreMap.get(choreName);
            if (chore != null) {
                chore.setSelectedForThisWeek((boolean) tableModel.getValueAt(i, 1));
            }
        }
    }

// * This method updates the chore table based on the day of combobox 
    public void updateTableForSelectedDay(int dayNumberselected) {
        DefaultTableModel tableModel = (DefaultTableModel) choreTable.getModel();
        tableModel.setRowCount(0);

        for (int i = 0; i < choresArrayList.size(); i++) {
            if (choresArrayList.get(i).getChoreDay() == dayNumberselected) {
                tableModel.addRow(new Object[]{choresArrayList.get(i).getChoreName(), choresArrayList.get(i).isSelectedForThisWeek()});
            }
        }
    }

    //this is for so when the user adds a new chore adds it to the table directly 
    public void resetFrame() {
        setVisible(false);
        dispose();
        new SelectWeeklyChoreGUI().setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectWeeklyChoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //   new SelectWeeklyChoreGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addChoreButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel chooseChoreLabel;
    private javax.swing.JComboBox<String> chooseDayChore;
    private javax.swing.JScrollPane choreScrollPane;
    private javax.swing.JTable choreTable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar menueBarOne;
    private javax.swing.JButton submitChoreButton;
    // End of variables declaration//GEN-END:variables

}
